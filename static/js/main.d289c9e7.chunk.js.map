{"version":3,"sources":["Resize.js","App.js","serviceWorker.js","index.js"],"names":["Resize","props","eventHandler","startResize","e","index","setState","isDragging","currentPanel","adjacentPanel","initialPos","clientX","stopResize","state","delta","previous_delta","console","log","resizePanel","event","panels","temp","temp_0","temp_1","previous","length","prevState","splice","widthCalc","number","num","window","innerWidth","i","push","maxCalc","total_panels","total","document","addEventListener","this","prevProps","max","rest","children","className","onMouseUp","concat","map","child","key","style","minWidth","onMouseDown","Component","App","addColumn","columns","total_columns","deleteColumn","name","filter","item","colors","maximize","onClick","backgroundColor","onDoubleClick","cursor","bind","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d289c9e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Resize extends Component {\r\n    eventHandler = null\r\n  \r\n    constructor (props) {\r\n      super(props)\r\n      \r\n      this.state = {\r\n        isDragging: false,\r\n        total_panels: this.props.total,\r\n        panels: []\r\n      }\r\n    }\r\n  \r\n    componentDidMount () {\r\n      document.addEventListener('mousemove', this.resizePanel)\r\n      document.addEventListener('mouseup', this.stopResize)\r\n      document.addEventListener('mouseleave', this.stopResize)\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps.total !== this.props.total){\r\n            this.widthCalc(this.props.total)\r\n        }\r\n\r\n        if (prevProps.max !== this.props.max){\r\n            this.maxCalc(this.props.max, this.props.total)\r\n        }\r\n    }\r\n\r\n    startResize = (e, index) => {\r\n      this.setState({\r\n        isDragging: true,\r\n        currentPanel: index,\r\n        adjacentPanel: index - 1,\r\n        initialPos: e.clientX\r\n      })\r\n\r\n    }\r\n    \r\n    stopResize = () => {\r\n      if (this.state.isDragging) {\r\n\r\n        this.setState({\r\n          isDragging: false,\r\n          delta: 0,\r\n          previous_delta: 0,\r\n          currentPanel: null\r\n        })\r\n\r\n        console.log(\"stop\", this.state.currentPanel, this.state.delta);\r\n\r\n      }\r\n    }\r\n    \r\n    resizePanel = (event) => {\r\n\r\n      if (this.state.isDragging) {\r\n\r\n        const {adjacentPanel, currentPanel, previous_delta, panels, initialPos} = this.state;\r\n        \r\n        let temp = panels;\r\n\r\n        let temp_0 = temp[currentPanel]\r\n        let temp_1 = temp[adjacentPanel]\r\n\r\n        let delta = event.clientX - initialPos\r\n\r\n        let previous = previous_delta ? previous_delta : delta\r\n\r\n        console.log(\"X\", event.clientX, temp_0, temp_1);\r\n\r\n        // if column is extending right columns (when delta is positive)\r\n        if ( delta > 0 ) {\r\n\r\n            if (temp_0 <= 0) {\r\n\r\n                temp_0 = 0\r\n\r\n                if (temp.length > currentPanel + 1) {\r\n                    console.log(\"hehe\", temp.length, currentPanel + 1);\r\n\r\n                    this.setState((prevState) => ({\r\n                        currentPanel: prevState.currentPanel++\r\n                    }))\r\n\r\n                } else {\r\n                    temp_1 += temp_0\r\n                    console.log(\"EXCEEEDING hehe\");\r\n                }\r\n\r\n            } else {\r\n                temp_1 += (delta - previous)\r\n                temp_0 -= (delta - previous);\r\n            }\r\n           \r\n        } else if ( delta < 0 ) {\r\n\r\n            if (temp_1 <= 0) {\r\n\r\n                temp_1 = 0\r\n\r\n                if (currentPanel - 1 !== 0) {\r\n                    console.log(\"hihi\", currentPanel - 1);\r\n\r\n                    this.setState((prevState) => ({\r\n                        adjacentPanel: prevState.adjacentPanel--\r\n                    }))\r\n\r\n                }\r\n                else {\r\n                    temp_0 += temp_1\r\n                    console.log(\"EXCEEEDING hihi\");\r\n                }\r\n\r\n            } else {\r\n\r\n                temp_1 += (delta - previous)\r\n                temp_0 -= (delta - previous);\r\n            }\r\n           \r\n        }\r\n\r\n        temp.splice(currentPanel, 1, temp_0)\r\n        temp.splice(adjacentPanel, 1, temp_1)\r\n\r\n        console.log(\"panels\", temp);\r\n\r\n        this.setState({\r\n          panels: temp,\r\n          previous_delta: delta\r\n        })\r\n\r\n      }\r\n\r\n    }\r\n\r\n    widthCalc = (number) => {\r\n\r\n        let temp = [], num = (window.innerWidth - ((number - 1) * 10)) / number  // 10 is order plus resizer width\r\n\r\n        for (let i = 0; i < number; i++) {\r\n            temp.push(num)            \r\n        }\r\n        \r\n        this.setState({ panels: temp })\r\n    }\r\n\r\n    maxCalc = (index, number) => {\r\n\r\n        let temp = [], num = (number - 1) * 8;\r\n\r\n        for (let i = 0; i < number; i++) {\r\n\r\n            if (i !== index) {\r\n                temp.push(0)\r\n            } else {\r\n                temp.push(window.innerWidth - num)\r\n            }\r\n                        \r\n        }\r\n        \r\n        this.setState({ panels: temp })\r\n    }\r\n    \r\n    render() {\r\n\r\n      const { panels, delta, currentPanel } = this.state;\r\n\r\n      const rest = this.props.children;\r\n\r\n      return (\r\n        <div className=\"panel-container\" onMouseUp={() => this.stopResize()}>\r\n         \r\n          {[].concat(...rest.map((child, i) => {\r\n              if ( i === 0 ) {\r\n                  return [\r\n                    <div key={\"panel_\" + i} className=\"panel\" style={{minWidth: panels[i] + \"px\"}}>\r\n                        {child}\r\n                    </div>\r\n                  ]\r\n              } else {\r\n                return [\r\n                    <div onMouseDown={(e) => this.startResize(e, i)}\r\n                        key={\"resizer_\" + i}\r\n                        className=\"resizer\">\r\n                    </div>,\r\n                    <div key={\"panel_\" + i} className=\"panel\" style={{minWidth: panels[i] + \"px\"}}>\r\n                        {child}\r\n                    </div>\r\n                  ]\r\n              }\r\n            \r\n          }))}\r\n        </div>\r\n      )\r\n    }\r\n}\r\n  \r\n\r\nexport default Resize;","import React, { Component } from 'react';\nimport Resize from './Resize';\nimport './App.css';\n\nclass App extends Component{\n  constructor () {\n    super ()\n\n    this.state = {\n      columns: [],\n      colors: [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"indigo\"],\n      total_columns: 0,\n      maximize: null\n    };\n\n  }\n\n  addColumn = () => {\n\n    if (this.state.columns.length > 0) {\n\n        let num = this.state.total_columns + 1;\n\n        this.setState(prevState => ({\n          columns: prevState.columns.concat(\"C\" + num),\n          total_columns: num\n        }))\n\n      \n\n    } else {\n\n      this.setState(prevState => ({\n        columns: prevState.columns.concat(\"C0\")\n      }))\n\n    }\n\n  }\n\n  deleteColumn = (name) => {\n\n    console.log(name);\n\n    this.setState(prevState => ({\n      columns: prevState.columns.filter( item => item !== name )\n    }))\n\n  }\n\n  render() {\n\n    const { colors, columns, maximize } = this.state;\n\n    return (\n\n      <div>\n        <button className=\"button right\" onClick={this.addColumn}>Add Column</button>\n        \n        {columns && <Resize total = {columns.length} max = {maximize}>\n\n          {\n            columns.map((item, index) => \n              <div\n                key={index}\n                style={{backgroundColor: `${colors[index % 7]}`}}\n                className=\"column\"\n                onDoubleClick={ () => this.setState({ maximize: index })}\n              >\n                <label>{item}</label>\n                <small \n                  style ={{cursor: 'pointer'}}\n                  onClick={this.deleteColumn.bind(this, item)}>x</small>\n              </div>\n            )\n          }\n          \n        </Resize> }\n      </div>\n\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}